[{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/","title":"AWS Fargate Workshop","tags":[],"description":"","content":"Serverless Container Orchestration with AWS Fargate Tổng quan Trong workshop thực hành này, bạn sẽ xây dựng một hệ thống microservices serverless sử dụng AWS Fargate để triển khai và quản lý containers mà không cần quản lý hạ tầng cơ sở.\nCông nghệ sử dụng AWS Fargate - Serverless compute engine cho containers Amazon ECS - Container orchestration service Application Load Balancer - Phân phối traffic và load balancing Amazon Aurora Serverless - Serverless database Amazon ECR - Container registry AWS CodePipeline - CI/CD automation Luồng kiến trúc Mục tiêu Workshop Hiểu về serverless container architecture trên AWS Triển khai microservices với Fargate và ECS Cấu hình networking, load balancing và auto-scaling Thiết lập monitoring và CI/CD pipeline Nội dung chính Giới thiệu về Serverless Containers Chuẩn bị môi trường AWS Thiết lập VPC và Networking Tạo ECS Cluster với Fargate Triển khai Microservices Cấu hình Load Balancer Monitoring và Logging CI/CD Pipeline Dọn dẹp tài nguyên "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/1-introduction/","title":"Giới thiệu","tags":[],"description":"","content":"Nội dung:\nMục tiêu Workshop Container Orchestration Serverless là gì Tổng quan về AWS Fargate Kết quả nhận được Mục tiêu Workshop Workshop này nhằm cung cấp kinh nghiệm thực hành với container orchestration serverless sử dụng AWS Fargate. Bạn sẽ học cách xây dựng, triển khai và quản lý các microservices được container hóa mà không cần quản lý hạ tầng cơ sở.\nMục tiêu chính:\nXây dựng kiến trúc microservices hoàn chỉnh sử dụng AWS Fargate Triển khai container orchestration với Amazon ECS Cấu hình networking, load balancing và service discovery Thiết lập monitoring, logging và CI/CD pipelines Áp dụng best practices cho ứng dụng containerized production-ready Container Orchestration Serverless là gì Container Orchestration Serverless kết hợp lợi ích của containerization với các nguyên tắc serverless computing:\nContainer Orchestration truyền thống:\nYêu cầu quản lý EC2 instances, clusters và scaling Cung cấp và bảo trì hạ tầng thủ công Lập kế hoạch capacity và tối ưu hóa tài nguyên phức tạp Container Orchestration Serverless với Fargate:\nKhông quản lý hạ tầng - AWS xử lý servers, patching và scaling Trả tiền theo sử dụng - Chỉ trả tiền cho tài nguyên compute mà containers thực sự sử dụng Tự động scaling - Scale up/down dựa trên nhu cầu mà không cần can thiệp thủ công Bảo mật tích hợp - Môi trường compute cô lập với tích hợp VPC Tập trung vào ứng dụng - Dành thời gian cho business logic, không phải hạ tầng Tổng quan về AWS Fargate AWS Fargate là serverless compute engine cho containers hoạt động với cả Amazon ECS và Amazon EKS.\nLợi ích cốt lõi:\nServerless: Không có EC2 instances để quản lý Bảo mật: Cô lập ở mức task với dedicated kernel runtime Có thể mở rộng: Tự động scaling từ zero đến hàng nghìn containers Hiệu quả chi phí: Chỉ trả tiền cho tài nguyên mà containers sử dụng Tích hợp: Hoạt động liền mạch với các dịch vụ AWS (ALB, CloudWatch, IAM, v.v.) Fargate vs EC2 Launch Type:\nTính năng EC2 Launch Type Fargate Launch Type Hạ tầng Bạn quản lý EC2 instances AWS quản lý hạ tầng Scaling Cấu hình Manual/ASG Tự động scaling ở mức task Giá cả Giờ EC2 instance vCPU và memory theo giây Bảo trì OS patching, updates Được quản lý hoàn toàn Kiểm soát Kiểm soát instance đầy đủ Tập trung vào container Use Case Workloads dài hạn, có thể dự đoán Workloads biến đổi, event-driven Kết quả nhận được Sau khi hoàn thành workshop này, bạn sẽ có thể biết được các kiến thức về:\nHạ tầng \u0026amp; Networking:\nThiết kế và triển khai kiến trúc VPC cho ứng dụng containerized Cấu hình Application Load Balancer với target groups và health checks Thiết lập service discovery và giao tiếp giữa các services Container Orchestration:\nTạo và quản lý ECS clusters với Fargate launch type Viết task definitions và service configurations Triển khai auto-scaling policies cho containerized services Cấu hình tối ưu hóa phân bổ tài nguyên (CPU, memory) Phát triển ứng dụng:\nContainer hóa ứng dụng sử dụng Docker best practices Xây dựng microservices với separation of concerns phù hợp Triển khai health checks và graceful shutdown patterns Xử lý configuration management và secrets DevOps \u0026amp; Monitoring:\nThiết lập CI/CD pipelines cho ứng dụng containerized Triển khai monitoring và alerting toàn diện Cấu hình centralized logging với structured logs Sử dụng distributed tracing để debug microservices Bảo mật \u0026amp; Best Practices:\nTriển khai least-privilege IAM roles và policies Cấu hình network security với security groups và NACLs Quản lý secrets và environment variables một cách bảo mật Áp dụng container security best practices Ứng dụng thực tế:\nNền tảng thương mại điện tử: Product catalogs có thể mở rộng, xử lý đơn hàng, hệ thống thanh toán API Backends: RESTful APIs với tự động scaling dựa trên traffic Xử lý dữ liệu: Data pipelines event-driven và batch processing jobs Migration Microservices: Hiện đại hóa ứng dụng monolithic Startup MVPs: Rapid prototyping mà không cần overhead hạ tầng Yêu cầu tiên quyết: Hiểu biết cơ bản về containers và Docker Quen thuộc với các dịch vụ AWS cốt lõi (VPC, EC2, IAM) Kinh nghiệm với ít nhất một ngôn ngữ lập trình (Python, Node.js, hoặc Go) AWS CLI được cấu hình với quyền phù hợp Thời gian ước tính: 4-5 giờ Ước tính chi phí: $5-10 USD cho toàn bộ workshop (nhớ cleanup resources!) "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/2-prepare-environment/","title":"Chuẩn bị môi trường","tags":[],"description":"","content":"Nội dung:\nDanh sách yêu cầu Thiết lập tài khoản AWS Cài đặt AWS CLI Cài đặt Docker Desktop Cài đặt Git Thiết lập Code Editor Kiểm tra cài đặt Ứng dụng mẫu Danh sách yêu cầu Trước khi bắt đầu workshop này, hãy đảm bảo bạn có những thứ sau:\nTài khoản AWS với quyền Administrator AWS CLI được cài đặt và cấu hình Docker Desktop được cài đặt và chạy Git được cài đặt Text editor (khuyến nghị VS Code) Hiểu biết cơ bản về containers và các dịch vụ AWS Quan trọng: Workshop này sẽ tạo ra các tài nguyên AWS có thể phát sinh chi phí. Chi phí ước tính: $5-10 USD cho toàn bộ workshop. Nhớ dọn dẹp tài nguyên khi hoàn thành!\nThiết lập tài khoản AWS Yêu cầu tài khoản AWS Bạn cần một tài khoản AWS với những điều sau:\nThẻ tín dụng hợp lệ được đính kèm để thanh toán Số điện thoại đã được xác minh Quyền truy cập Administrator hoặc quyền tương đương Ước tính chi phí Dịch vụ Chi phí ước tính/Giờ Ghi chú Fargate Tasks $0.04 - $0.08 3 services, 0.25 vCPU, 0.5GB RAM mỗi cái Application Load Balancer $0.025 Giá chuẩn ALB Aurora Serverless v2 $0.06 - $0.12 Phụ thuộc vào sử dụng NAT Gateway $0.045 Phí xử lý dữ liệu CloudWatch Logs $0.50/GB Logs tối thiểu dự kiến ECR Storage $0.10/GB/tháng Container images Tổng ước tính ~$0.25/giờ ~$1.00 cho workshop 4 giờ Tạo IAM User Thay vì sử dụng tài khoản root, hãy tạo một IAM user chuyên dụng cho workshop này.\nĐăng nhập AWS Console → IAM Users → Create user Chi tiết user:\nUser name: fargate-workshop-user Cung cấp quyền truy cập user vào AWS Management Console Thiết lập quyền:\nAttach policies directly Tìm kiếm và chọn: AdministratorAccess Review và tạo Download credentials hoặc copy Access Key ID và Secret Access Key Cài đặt AWS CLI Download AWS CLI MSI installer: https://awscli.amazonaws.com/AWSCLIV2.msi\nChạy file MSI và làm theo hướng dẫn cài đặt\nMở Command Prompt mới và kiểm tra: aws \u0026ndash;version Kết quả mong đợi: aws-cli/2.15.30 Python/3.11.8 Windows/10 exe/AMD64 prompt/off\nKiểm tra cài đặt aws \u0026ndash;version\nCấu hình AWS CLI aws configure AWS Access Key ID [None]: AKIA\u0026hellip; AWS Secret Access Key [None]: wJalrXUt\u0026hellip; Default region name [None]: us-east-1 Default output format [None]: json\nKiểm tra cấu hình AWS CLI\nKiểm tra danh tính của bạn aws sts get-caller-identity\nKiểm tra quyền aws s3 ls\nKiểm tra region đã cấu hình: aws configure get region Kết quả mong đợi của aws sts get-caller-identity\n{ \u0026ldquo;UserId\u0026rdquo;: \u0026ldquo;AIDACKCEVSQ6C2EXAMPLE\u0026rdquo;, \u0026ldquo;Account\u0026rdquo;: \u0026ldquo;123456789012\u0026rdquo;, \u0026ldquo;Arn\u0026rdquo;: \u0026ldquo;arn:aws:iam::123456789012:user/fargate-workshop-user\u0026rdquo; }\nCài đặt Docker Desktop Download Docker Desktop: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\nChạy installer và làm theo hướng dẫn thiết lập\nKhởi động lại máy tính sau khi cài đặt\nKhởi động Docker Desktop từ Start Menu\nKiểm tra cài đặt: docker \u0026ndash;version docker run hello-world\nKiểm tra Docker hoạt động Kiểm tra Docker version: docker \u0026ndash;version\nTest Docker với hello-world: docker run hello-world\nKiểm tra Docker Compose: docker compose version Kết quả mong đợi của Docker hello-world\nHello from Docker!\nCài đặt Git Download Git: https://git-scm.com/download/win Chạy installer với các thiết lập mặc định\nKiểm tra cài đặt: git \u0026ndash;version Cấu hình Git cơ bản\nThiết lập tên và email git config \u0026ndash;global user.name \u0026ldquo;Tên của bạn\u0026rdquo; git config \u0026ndash;global user.email \u0026ldquo;email@example.com\u0026rdquo;\nKiểm tra cấu hình git config \u0026ndash;list\nThiết lập Code Editor VS Code (Khuyến khích) Download VS Code: https://code.visualstudio.com/\nCài đặt các extensions hữu ích:\nAWS Toolkit - Tích hợp dịch vụ AWS Docker - Quản lý Docker container YAML - Syntax highlighting cho YAML JSON - Định dạng JSON GitLens - Tính năng Git nâng cao Python - Hỗ trợ Python Go - Hỗ trợ Go language\nKiểm tra cài đặt Chạy các lệnh sau để đảm bảo mọi thứ đã được cài đặt đúng cách:\nAWS CLI aws \u0026ndash;version aws sts get-caller-identity\nDocker docker \u0026ndash;version docker run hello-world\nGit git \u0026ndash;version\nKiểm tra AWS region aws configure get region\nNếu tất cả các lệnh trên chạy thành công, bạn đã sẵn sàng cho workshop!\n"},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/3-vpc-and-networking-setup/","title":"Thiết lập VPC và Networking","tags":[],"description":"","content":"Nội dung:\nMục tiêu Tạo VPC Tạo Subnet Tạo Internet Gateway Tạo NAT Gateway Tạo Route Tables Tạo Security Groups Kết quả mong đợi Mục tiêu Tạo VPC riêng cho ứng dụng. Chia Public Subnet và Private Subnet ở 2 Availability Zones (Multi-AZ). Thiết lập Internet Gateway, NAT Gateway, Route Tables để đảm bảo: Public Subnet có thể truy cập Internet (cho ALB, NAT). Private Subnet có thể ra ngoài qua NAT Gateway (cho Fargate Tasks tải image, gọi API…). Chuẩn bị Security Groups để kiểm soát lưu lượng. Tạo VPC Vào VPC Console → Create VPC Chọn:\nName tag: fargate-workshop-vpc IPv4 CIDR: 10.0.0.0/16 Tenancy: Default Tạo Subnet Vào Subnets → Create subnet Chọn VPC vừa tạo Tạo 4 Subnet: Public Subnet 1: 10.0.1.0/24 (AZ1) Private Subnet 1: 10.0.3.0/24 (AZ1) Public Subnet 2: 10.0.2.0/24 (AZ2) Private Subnet 2: 10.0.4.0/24 (AZ2) Tạo Internet Gateway Vào Internet Gateways → Create IGW Name: fargate-igw Attach vào VPC vừa tạo Tạo NAT Gateway Vào NAT Gateways → Create NAT Gateway Chọn: Public Subnet 1 (AZ1) Allocate Elastic IP Tạo NAT Gateway thứ 2 cho Public Subnet 2 (AZ2) để High Availability Tạo Route Tables Public Route Table: Route: 0.0.0.0/0 → Internet Gateway Associate với Public Subnet 1 \u0026amp; 2 Private Route Table AZ1: Route: 0.0.0.0/0 → NAT Gateway AZ1 Associate với Private Subnet 1 Private Route Table AZ2: Route: 0.0.0.0/0 → NAT Gateway AZ2 Associate với Private Subnet 2 Tạo Security Groups ALB Security Group: Inbound: TCP 80, 443 từ 0.0.0.0/0 Outbound: Allow all Fargate Tasks Security Group: Inbound: TCP 8080 từ ALB SG Outbound: Allow all Database Security Group (nếu có Aurora/DynamoDB trong Private Subnet): Inbound: 3306 (Aurora) từ Fargate SG Outbound: Allow all Kết quả mong đợi Bạn sẽ có một cấu trúc mạng với:\nVPC 10.0.0.0/16 2 Public Subnets (AZ1, AZ2) + 2 Private Subnets (AZ1, AZ2) Internet Gateway cho Public Subnets NAT Gateway cho Private Subnets Route Tables được cấu hình chuẩn Security Groups tách biệt cho ALB, Fargate và Database "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/4-create-ecs-cluster-with-fargate/","title":"Tạo ECS Cluster với Fargate","tags":[],"description":"","content":"Nội dung:\nĐăng nhập ECR Tạo Repository ECR Build và Push Image lên ECR Tạo ECS Cluster Tạo Task Definition Triển khai Service với Fargate Đăng nhập ECR Chạy lệnh đăng nhập ECR:\naws ecr get-login-password \u0026ndash;region us-east-1 | docker login \u0026ndash;username AWS \u0026ndash;password-stdin \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com\nTạo Repository ECR Mở ECR Console → Create repository Nhập tên: fargate-workshop-app Chọn Private Tạo repository và copy URI Build và Push Image lên ECR Build Docker image:\ndocker build -t fargate-workshop-app .\nGắn thẻ (tag) image với URI ECR (thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; bằng số tài khoản của bạn):\ndocker tag fargate-workshop-app:latest \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-workshop-app:latest\nPush image lên ECR:\ndocker push \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-workshop-app:latest\nTạo ECS Cluster Mở ECS Console → Clusters → Create Cluster Chọn Networking only (Powered by AWS Fargate) Nhập tên cluster: fargate-workshop-cluster Chọn VPC và các Subnets đã tạo ở phần Networking Chọn Create Tạo Task Definition Mở ECS Console → Task Definitions → Create new Task Definition Chọn Fargate Nhập tên: fargate-workshop-task Chọn Task Role: ecsTaskExecutionRole Định nghĩa container: Container name: fargate-workshop-app Image: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-workshop-app:latest Port mappings: 8080 (TCP) Chọn Next step và Create Triển khai Service với Fargate Mở ECS Console → Chọn Cluster fargate-workshop-cluster → Create Service Chọn: Launch type: Fargate Task Definition: fargate-workshop-task Platform version: LATEST Service name: fargate-service Number of tasks: 2 Cấu hình network: Chọn VPC và Subnets Assign public IP: ENABLED (nếu muốn public access) Chọn Security Group cho phép port 8080 Chọn Application Load Balancer nếu muốn cân bằng tải: Create new target group Listener port: 80 Review và Create Service title: \u0026ldquo;Tạo ECS Cluster với Fargate\u0026rdquo;\nTạo Repository ECR Mở ECR Console → Create repository Nhập tên: fargate-workshop-app Chọn Private Tạo repository và copy URI Build và Push Image lên ECR Build Docker image:\ndocker build -t fargate-workshop-app .\nGắn thẻ (tag) image với URI ECR (thay \u0026lt;AWS_ACCOUNT_ID\u0026gt; bằng số tài khoản của bạn):\ndocker tag fargate-workshop-app:latest \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-workshop-app:latest\nPush image lên ECR:\ndocker push \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-workshop-app:latest\nTạo ECS Cluster Mở ECS Console → Clusters → Create Cluster Chọn Networking only (Powered by AWS Fargate) Nhập tên cluster: fargate-workshop-cluster Chọn VPC và các Subnets đã tạo ở phần Networking Chọn Create Tạo Task Definition Mở ECS Console → Task Definitions → Create new Task Definition Chọn Fargate Nhập tên: fargate-workshop-task Chọn Task Role: ecsTaskExecutionRole Định nghĩa container: Container name: fargate-workshop-app Image: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-workshop-app:latest Port mappings: 8080 (TCP) Chọn Next step và Create Triển khai Service với Fargate Mở ECS Console → Chọn Cluster fargate-workshop-cluster → Create Service Chọn: Launch type: Fargate Task Definition: fargate-workshop-task Platform version: LATEST Service name: fargate-service Number of tasks: 2 Cấu hình network: Chọn VPC và Subnets Assign public IP: ENABLED (nếu muốn public access) Chọn Security Group cho phép port 8080 Chọn Application Load Balancer nếu muốn cân bằng tải: Create new target group Listener port: 80 Review và Create Service Khi Service đã chạy, bạn có thể truy cập ứng dụng thông qua DNS name của Load Balancer.\nCreate ECS Cluster with Fargate "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/5-deploying-microservices/","title":"Triển khai Microservices","tags":[],"description":"","content":"Nội dung:\nGiới thiệu Tạo Task Definition cho từng service Triển khai các service trên ECS Cluster Kiểm tra triển khai Giới thiệu Trong phần này, chúng ta sẽ triển khai nhiều container service (microservices) lên một ECS Cluster sử dụng AWS Fargate.\nMỗi service sẽ đảm nhiệm một chức năng riêng như API service, frontend service hoặc background worker.\nƯu điểm khi triển khai theo mô hình microservices:\nTăng khả năng mở rộng (scalability) cho từng thành phần Dễ bảo trì, nâng cấp từng module mà không ảnh hưởng toàn bộ hệ thống Giảm thiểu rủi ro nếu một service gặp sự cố Tạo Task Definition cho từng service Service 1 – API\nVào ECS Console → Task Definitions → Create new Task Definition Chọn Fargate Nhập tên: api-service-task Chọn Task Role: ecsTaskExecutionRole Thêm container: Name: api-service Image: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/api-service:latest Port mappings: 8080 Lưu và tạo Task Definition. Service 2 – Frontend\nTương tự Service 1, nhưng: Name: frontend-service Image: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/frontend-service:latest Port mappings: 80 Service 3 – Worker (Background Job)\nTương tự, nhưng: Name: worker-service Image: \u0026lt;AWS_ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/worker-service:latest Không cần port mapping nếu không expose ra ngoài Triển khai các service trên ECS Cluster Triển khai API Service\nVào ECS Console → Chọn Cluster → Create Service Launch type: Fargate Task Definition: api-service-task Service name: api-service Số lượng tasks: 2 Networking: Chọn VPC và Subnets Bật Assign Public IP nếu muốn public access Chọn Security Group cho phép port 8080 (Tùy chọn) Gắn vào Application Load Balancer target group Triển khai Frontend Service\nTương tự API Service, nhưng: Task Definition: frontend-service-task Port: 80 Security Group cho phép port 80 Triển khai Worker Service\nTương tự, nhưng: Task Definition: worker-service-task Không cần gắn ALB Chạy trong private subnet Kiểm tra triển khai Vào ECS Console → Cluster → Tab Services Đảm bảo trạng thái service là Running Nếu service gắn ALB: Vào EC2 Console → Load Balancers\nSao chép DNS name của ALB\nTruy cập từ trình duyệt hoặc dùng lệnh curl để kiểm tra:\ncurl http://\u0026lt;ALB_DNS_NAME\u0026gt;/health\nKết quả mong đợi: Nhận phản hồi 200 OK hoặc thông báo từ API.\n"},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/6-configure-load-balancer/","title":"Cấu hình Load Balancer","tags":[],"description":"","content":"Nội dung:\nTổng quan Tạo Application Load Balancer (ALB) Tạo Target Groups Gán Services vào Target Groups Kiểm tra hoạt động Tổng quan Application Load Balancer (ALB) sẽ giúp phân phối lưu lượng truy cập đến nhiều dịch vụ (microservices) chạy trên ECS Fargate.\nALB hỗ trợ path-based routing và host-based routing, giúp điều hướng request tới đúng service.\nLợi ích:\nCân bằng tải giữa nhiều instance của service Đảm bảo high availability và fault tolerance Dễ dàng mở rộng khi có nhiều traffic Tạo Application Load Balancer (ALB) Vào EC2 Console → Load Balancers → Create Load Balancer Chọn Application Load Balancer Đặt tên: fargate-alb Scheme: Internet-facing (nếu public) IP address type: IPv4 Chọn VPC và ít nhất 2 Subnet ở 2 AZ khác nhau (Multi-AZ) Security Group: Cho phép HTTP (80) và HTTPS (443) nếu dùng SSL Bỏ qua Target Group tại bước này (sẽ tạo sau) Nhấn Create Load Balancer Tạo Target Groups Vào EC2 Console → Target Groups → Create target group Loại target: IP addresses Đặt tên: api-target-group Protocol: HTTP, Port: 8080 (hoặc port service API) Chọn VPC đã tạo trước đó Health check path: /health Tạo thêm target group cho Frontend: Tên: frontend-target-group Port: 80 Health check path: / Gán Services vào Target Groups Vào ECS Console → Cluster → Service → Chọn service cần cấu hình Chỉnh sửa service → Phần Load balancing: Chọn Application Load Balancer Listener: HTTP 80 (hoặc HTTPS 443 nếu có SSL) Chọn Target Group tương ứng (API → api-target-group, Frontend → frontend-target-group) Lưu và deploy lại service Kiểm tra hoạt động Vào EC2 Console → Load Balancers → Chọn fargate-alb Sao chép DNS name của ALB Truy cập trên trình duyệt: http://\u0026lt;ALB_DNS\u0026gt;/ → hiển thị frontend http://\u0026lt;ALB_DNS\u0026gt;/api/health → trả về thông báo API health check Đảm bảo trạng thái Target Group là healthy "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/7-monitoring-and-logging/","title":"Monitoring và Logging","tags":[],"description":"","content":"Nội dung:\nTổng quan Kích hoạt Amazon CloudWatch Logs Kích hoạt Container Insights Kiểm tra Log và Metrics Tích hợp Cảnh báo (Alarms) Tổng quan Monitoring và Logging giúp bạn theo dõi tình trạng hoạt động của ứng dụng và hạ tầng.\nTrong workshop này, chúng ta sẽ sử dụng:\nAmazon CloudWatch Logs để lưu trữ và phân tích log từ container. CloudWatch Container Insights để theo dõi CPU, Memory, Network và Storage usage. CloudWatch Alarms để nhận thông báo khi có vấn đề. Kích hoạt Amazon CloudWatch Logs Truy cập ECS Console → Cluster → Chọn service của bạn. Trong Task Definition, kiểm tra cấu hình log driver: Chọn awslogs làm log driver. Đặt tên Log Group: /ecs/fargate-workshop Region: us-east-1 (hoặc region của bạn). Lưu và redeploy service. Kích hoạt Container Insights Truy cập CloudWatch Console → Container Insights. Chọn Enable cho ECS Cluster của bạn. Container Insights sẽ tự động thu thập: CPUUtilization MemoryUtilization NetworkRxBytes / NetworkTxBytes StorageReadBytes / StorageWriteBytes Kiểm tra Log và Metrics Vào CloudWatch Console → Logs → Chọn Log Group /ecs/fargate-workshop. Xem log output từ các container (stdout, stderr). Vào CloudWatch Metrics → ECS → Cluster Metrics để xem thống kê CPU, RAM, Network. Lọc theo từng service hoặc từng task để phân tích chi tiết. Tích hợp Cảnh báo (Alarms) Vào CloudWatch Console → Alarms → Create alarm. Chọn metric, ví dụ: ECS/ContainerInsights – CPUUtilization. Đặt ngưỡng cảnh báo, ví dụ: CPU \u0026gt; 80% trong 5 phút. Chọn SNS Topic để nhận email khi cảnh báo kích hoạt. Lưu và kích hoạt alarm. Kết quả mong đợi:\nBạn có thể xem log của từng container để debug. Theo dõi được hiệu suất ứng dụng theo thời gian thực. Nhận thông báo khi hệ thống gặp sự cố hoặc vượt ngưỡng tài nguyên. "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/8-ci-cd-pipeline/","title":"CI/CD Pipeline","tags":[],"description":"","content":"Nội dung:\nTổng quan Tạo CodeCommit repository Tạo CodeBuild project buildspec.yml (ví dụ) Tạo CodePipeline pipeline Kiểm tra pipeline Xử lý sự cố \u0026amp; lưu ý Tổng quan Phần này hướng dẫn triển khai pipeline CI/CD để tự động build Docker image và deploy lên ECS Fargate. Sử dụng các dịch vụ:\nAWS CodeCommit (lưu trữ mã nguồn) AWS CodeBuild (build \u0026amp; push image lên ECR) Amazon ECR (lưu trữ container image) AWS CodePipeline (orchestration) Amazon ECS (deploy) Tạo CodeCommit repository Mở AWS CodeCommit Console → Create repository\nĐặt tên repository: fargate-microservices\nGhi lại URL clone HTTPS hoặc SSH. Ví dụ (HTTPS):\ngit clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/fargate-microservices\nThêm mã nguồn ứng dụng (Dockerfile, code app, buildspec.yml – xem bên dưới) và push lên repository.\nTạo CodeBuild project Mở AWS CodeBuild Console → Create build project Đặt tên project: fargate-build Source: chọn AWS CodeCommit, chọn repository fargate-microservices Environment: Managed image: aws/codebuild/standard:7.0 (hoặc mới hơn) Bật Privileged mode (cần cho Docker build/push) Service role: Cho phép CodeBuild tạo mới, hoặc dùng role có quyền: AmazonEC2ContainerRegistryPowerUser Ghi log lên CloudWatch Quyền build cơ bản cho CodeBuild Buildspec: sử dụng file trong repo (khuyến nghị) hoặc nhập trực tiếp. Lưu project và chạy thử build sau khi push code. buildspec.yml (ví dụ) Tạo file buildspec.yml trong thư mục gốc repo, nội dung:\nversion: 0.2 phases: pre_build: commands: - echo Đăng nhập Amazon ECR... - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin \u0026lt;ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com - REPOSITORY_URI=\u0026lt;ACCOUNT_ID\u0026gt;.dkr.ecr.us-east-1.amazonaws.com/fargate-microservice - IMAGE_TAG=latest build: commands: - echo Bắt đầu build vào `date` - echo Build Docker image... - docker build -t $REPOSITORY_URI:$IMAGE_TAG . - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG post_build: commands: - echo Hoàn thành build vào `date` - echo Push Docker image... - docker push $REPOSITORY_URI:$IMAGE_TAG - printf '[{\u0026quot;name\u0026quot;:\u0026quot;fargate-microservice\u0026quot;,\u0026quot;imageUri\u0026quot;:\u0026quot;%s\u0026quot;}]' $REPOSITORY_URI:$IMAGE_TAG \u0026gt; imagedefinitions.json artifacts: files: - imagedefinitions.json Lưu ý:\nThay \u0026lt;ACCOUNT_ID\u0026gt; bằng AWS account ID của bạn. imagedefinitions.json cần cho bước deploy ECS trong CodePipeline. Có thể đổi IMAGE_TAG theo commit SHA để quản lý phiên bản. Tạo CodePipeline pipeline Mở AWS CodePipeline Console → Create pipeline\nĐặt tên: fargate-cicd-pipeline\nService role: cho phép tạo mới hoặc dùng role có đủ quyền.\nCác stage:\nSource stage\nProvider: AWS CodeCommit Repository: fargate-microservices Branch: main Build stage\nProvider: AWS CodeBuild Project: fargate-build Artifact output: imagedefinitions.json Deploy stage\nProvider: Amazon ECS Mode: Deploy Cluster: fargate-workshop-cluster Service: api-service (hoặc service của bạn) Image definitions file: imagedefinitions.json Tạo pipeline. Pipeline sẽ chạy ngay cho commit hiện tại.\nKiểm tra pipeline Chỉnh sửa file trong repo, ví dụ README.\nCommit \u0026amp; push:\ngit add . git commit -m \u0026ldquo;Test pipeline\u0026rdquo; git push origin main\nQuan sát:\nCodePipeline chạy từ Source → Build → Deploy CodeBuild build \u0026amp; push image lên ECR ECS cập nhật task với image mới Truy cập endpoint của ứng dụng (DNS của ALB) để kiểm tra.\nXử lý sự cố \u0026amp; lưu ý Lỗi quyền: đảm bảo role của CodeBuild có quyền push ECR và ghi log. Privileged mode: bắt buộc cho Docker build trong CodeBuild. Timeout: tăng thời gian build nếu cần. imagedefinitions.json: phải đúng format [{ \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;container-name\u0026gt;\u0026quot;, \u0026quot;imageUri\u0026quot;: \u0026quot;\u0026lt;uri\u0026gt;\u0026quot; }]. Nhiều service: tạo pipeline riêng hoặc thêm nhiều deploy action. Test local: build \u0026amp; push thử local để chắc chắn Dockerfile chạy được. Kết quả mong đợi: mỗi khi commit code mới, pipeline sẽ tự động build, push image lên ECR và deploy ECS Fargate. "},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/9-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Nội dung:\nTại sao cần dọn dẹp? Xóa dịch vụ ECS và Cluster Xóa Load Balancer và Target Groups Xóa ECR Repositories Xóa VPC và các thành phần mạng Xóa CodePipeline, CodeBuild và CodeCommit Xóa IAM User và quyền Kiểm tra chi phí còn lại Tại sao cần dọn dẹp? Workshop đã tạo ra nhiều tài nguyên AWS có thể phát sinh chi phí liên tục nếu không xóa, như ECS Cluster, ALB, NAT Gateway, ECR Storage, CloudWatch Logs.\nDọn dẹp giúp:\nTránh phát sinh chi phí ngoài ý muốn. Giữ môi trường AWS gọn gàng. Đảm bảo tài nguyên không bị lộ hoặc bị khai thác trái phép. Xóa dịch vụ ECS và Cluster Mở Amazon ECS Console → Chọn Cluster: fargate-workshop-cluster. Dừng tất cả các Services: Chọn từng service → Delete service → Xác nhận. Chờ tất cả các Tasks dừng. Xóa Cluster: Delete cluster. Xóa Load Balancer và Target Groups Mở EC2 Console → Load Balancers. Chọn ALB đã tạo (ví dụ: fargate-workshop-alb) → Delete. Mở Target Groups → Xóa các nhóm liên quan đến ALB. Xóa ECR Repositories Mở Amazon ECR Console → Repositories. Chọn repository (ví dụ: fargate-microservices) → Delete. Chọn Force delete nếu có image bên trong. Xóa VPC và các thành phần mạng Chỉ xóa nếu bạn đã tạo mới cho workshop này, không xóa VPC mặc định.\nMở VPC Console → Your VPCs → Chọn VPC workshop → Delete. Xóa các Subnets, Route Tables, Internet Gateway, NAT Gateway, Security Groups liên quan. Xóa CodePipeline, CodeBuild và CodeCommit CodePipeline: Mở console → Chọn pipeline → Delete. CodeBuild: Xóa các project build không còn dùng. CodeCommit: Xóa repository workshop nếu không cần giữ code. Xóa IAM User và quyền Mở IAM Console → Users → Chọn fargate-workshop-user. Xóa các Access Keys. Xóa User hoàn toàn. Kiểm tra chi phí còn lại Mở Billing \u0026amp; Cost Management. Chọn Cost Explorer để kiểm tra chi phí theo ngày. Đảm bảo không còn dịch vụ nào hoạt động ngoài ý muốn. Kết quả mong đợi:\nTất cả tài nguyên AWS được tạo trong workshop đã bị xóa, tài khoản AWS trở về trạng thái sạch và không phát sinh chi phí tiếp theo.\n"},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://trungquangnguyeen.github.io/Serverless-Container-Orchestration/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]